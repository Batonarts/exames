-- Создание таблицы Гость
CREATE TABLE Гость (
    ГостьID INT PRIMARY KEY AUTO_INCREMENT, -- Уникальный идентификатор гостя
    Имя VARCHAR(50) NOT NULL, -- Имя гостя
    Фамилия VARCHAR(50) NOT NULL, -- Фамилия гостя
    Телефон VARCHAR(15), -- Номер телефона
    Email VARCHAR(100), -- Электронная почта
    ДатаРождения DATE, -- Дата рождения
    ТипДокумента VARCHAR(50), -- Тип документа
    НомерДокумента VARCHAR(50) -- Номер документа
);

-- Создание таблицы Тип номера
CREATE TABLE ТипНомера (
    ТипНомераID INT PRIMARY KEY AUTO_INCREMENT, -- Уникальный идентификатор типа номера
    НазваниеТипа VARCHAR(50) NOT NULL, -- Название типа номера
    Описание TEXT, -- Описание типа номера
    Вместимость INT NOT NULL -- Вместимость номера
);

-- Создание таблицы Номер
CREATE TABLE Номер (
    НомерID INT PRIMARY KEY AUTO_INCREMENT, -- Уникальный идентификатор номера
    ТипНомераID INT, -- Внешний ключ на тип номера
    Статус ENUM('Свободен', 'Занят', 'Грязный', 'Назначен к уборке', 'Чистый') NOT NULL, -- Статус номера
    Цена DECIMAL(10, 2) NOT NULL, -- Цена номера
    FOREIGN KEY (ТипНомераID) REFERENCES ТипНомера(ТипНомераID) -- Связь с таблицей Тип номера
);

-- Создание таблицы Бронирование
CREATE TABLE Бронирование (
    БронированиеID INT PRIMARY KEY AUTO_INCREMENT, -- Уникальный идентификатор бронирования
    ГостьID INT, -- Внешний ключ на гостя
    НомерID INT, -- Внешний ключ на номер
    ДатаЗаезда DATE NOT NULL, -- Дата заезда
    ДатаВыезда DATE NOT NULL, -- Дата выезда
    Статус ENUM('Подтверждено', 'Отменено') NOT NULL, -- Статус бронирования
    FOREIGN KEY (ГостьID) REFERENCES Гость(ГостьID), -- Связь с таблицей Гость
    FOREIGN KEY (НомерID) REFERENCES Номер(НомерID) -- Связь с таблицей Номер
);

-- Создание таблицы Услуга
CREATE TABLE Услуга (
    УслугаID INT PRIMARY KEY AUTO_INCREMENT, -- Уникальный идентификатор услуги
    НазваниеУслуги VARCHAR(100) NOT NULL, -- Название услуги
    Описание TEXT, -- Описание услуги
    Цена DECIMAL(10, 2) NOT NULL -- Цена услуги
);

-- Создание таблицы Оплата
CREATE TABLE Оплата (
    ОплатаID INT PRIMARY KEY AUTO_INCREMENT, -- Уникальный идентификатор оплаты
    БронированиеID INT, -- Внешний ключ на бронирование
    Сумма DECIMAL(10, 2) NOT NULL, -- Сумма оплаты
    ДатаОплаты DATE NOT NULL, -- Дата оплаты
    МетодОплаты VARCHAR(50), -- Метод оплаты
    FOREIGN KEY (БронированиеID) REFERENCES Бронирование(БронированиеID) -- Связь с таблицей Бронирование
);

-- Создание таблицы Персонал
CREATE TABLE Персонал (
    ПерсоналID INT PRIMARY KEY AUTO_INCREMENT, -- Уникальный идентификатор сотрудника
    Имя VARCHAR(50) NOT NULL, -- Имя сотрудника
    Фамилия VARCHAR(50) NOT NULL, -- Фамилия сотрудника
    Должность VARCHAR(50), -- Должность сотрудника
    Телефон VARCHAR(15), -- Номер телефона
    Email VARCHAR(100) -- Электронная почта
);

-- Создание таблицы Уборка
CREATE TABLE Уборка (
    УборкаID INT PRIMARY KEY AUTO_INCREMENT, -- Уникальный идентификатор уборки
    НомерID INT, -- Внешний ключ на номер
    ПерсоналID INT, -- Внешний ключ на сотрудника
    ДатаУборки DATE NOT NULL, -- Дата уборки
    Статус ENUM('Запланировано', 'Выполнено') NOT NULL, -- Статус уборки
    FOREIGN KEY (НомерID) REFERENCES Номер(НомерID), -- Связь с таблицей Номер
    FOREIGN KEY (ПерсоналID) REFERENCES Пер
